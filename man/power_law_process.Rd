% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_law_process.R,
%   R/repairable_systems_analysis.R
\name{power_law_process}
\alias{power_law_process}
\title{Maximum Likelihood Estimates for a Power Law Process}
\usage{
power_law_process(t, T, alpha = 0.05, fail.trunc = FALSE, iter = 10)

power_law_process(t, T, alpha = 0.05, fail.trunc = FALSE, iter = 10)
}
\arguments{
\item{t}{A list of failure time vectors. Each vector should indicate
a different system, i.e. if you have multiple systems each
systems' failure times should be in it's own vector.}

\item{T}{A list of Total Time on Test (TTT) (i.e. test duration) vectors.
The vectors in the list should be of length 1, and each vector should
indicate a different system, i.e. if you have multiple systems each
systems' TTT should be in it's own vector.}

\item{alpha}{1-confidence, supplied for parameter confidence intervals.}

\item{fail.trunc}{Logical indicating if the test was failure terminated.}

\item{iter}{The number of iterations for parameter calculations when
fail.truc is TRUE.}
}
\value{
The output will be a list consisting of parameter estimates,
  confidence interals (exact confidence intervals for beta), and iterative beta
  and lambda estimates to verify convergence when fail.truc is TRUE.

The output will be a list consisting of parameter estimates,
  confidence interals (exact confidence intervals for beta), and iterative beta
  and lambda estimates to verify convergence when fail.truc is TRUE.
}
\description{
\code{power_law_process} calculates the Maximum Likelihood Estimates
  for a Nonhomogeneous Poisson Process (NHPP) with Power Law Intensity
  Function (Crow-AMSAA model).

\code{power_law_process} calculates the Maximum Likelihood Estimates
  for a Nonhomogeneous Poisson Process (NHPP) with Power Law Intensity
  Function (Crow-AMSAA model).
}
\examples{
data(amsaa)

# Three systems all time truncated at 200 hours
power_law_process(
 t = split(amsaa$Time, amsaa$System),
 T = list(200,200,200),
 alpha = 0.05,
 fail.trunc = FALSE,
 iter = 10
)

# Three systems all failure truncated
power_law_process(
  t = split(amsaa$Time, amsaa$System),
  T = list(197.2,190.8,195.8),
  alpha = 0.19,
  fail.trunc = TRUE,
  iter = 10
)

# One system time truncated at 200 hours
power_law_process(
  t = list(subset(amsaa, System == "S1")$Time),
  T = list(200),
  alpha = 0.05,
  fail.trunc = FALSE,
  iter = 10
)

data(amsaa)

# Three systems all time truncated at 200 hours
power_law_process(
 t = split(amsaa$Time, amsaa$System),
 T = list(200,200,200),
 alpha = 0.05,
 fail.trunc = FALSE,
 iter = 10
)

# Three systems all failure truncated
power_law_process(
  t = split(amsaa$Time, amsaa$System),
  T = list(197.2,190.8,195.8),
  alpha = 0.19,
  fail.trunc = TRUE,
  iter = 10
)

# One system time truncated at 200 hours
power_law_process(
  t = list(subset(amsaa, System == "S1")$Time),
  T = list(200),
  alpha = 0.05,
  fail.trunc = FALSE,
  iter = 10
)

}
\seealso{
\code{\link{power_law_mcf}}, \code{\link{mcf}},
  \code{\link{trend_test}}, \code{\link{ttt}}, \code{\link{common_beta}}

\code{\link{power_law_mcf}}, \code{\link{mcf}},
  \code{\link{trend_test}}, \code{\link{ttt}}, \code{\link{common_beta}}
}
